{"version":3,"file":"safari-helpers.js","sourceRoot":"","sources":["../../src/safari-helpers.ts"],"names":[],"mappings":"AAAA;;GAEG;AAEH,MAAM,CAAC,MAAM,QAAQ,GAAG,GAAY,EAAE;IAClC,OAAO,IAAI,CAAC;IAChB,uEAAuE;AACvE,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,OAAe,EAAW,EAAE;IAC1D,MAAM,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC;IACtC,MAAM,WAAW,GAAG,SAAS,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;IACtD,IAAI,WAAW,EAAE;QACf,OAAO,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC;KAC5C;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,6BAA6B,GAAG,GAAG,EAAE;IAChD,IAAI,CAAC,QAAQ,EAAE,EAAE;QACf,OAAO,EAAE,CAAC;KACX;IAED,OAAO;QACL,0BAA0B;QAC1B,QAAQ,EAAE,wBAAwB;QAClC,kBAAkB,EAAE,MAAM,EAAE,gDAAgD;KAC7E,CAAC;AACJ,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,KAAW,EAAE,cAAsB,EAAU,EAAE;IAC/E,IAAI,CAAC,QAAQ,EAAE,EAAE;QACf,OAAO,CAAC,GAAG,cAAc,EAAE,KAAK,CAAC,CAAC;KACnC;IAED,gDAAgD;IAChD,IAAI,KAAK,IAAI,KAAK,CAAC,IAAI,GAAG,CAAC,EAAE;QAC3B,mDAAmD;QACnD,IAAI;YACF,mCAAmC;YACnC,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;gBACjD,OAAO,CAAC,GAAG,CAAC,uCAAuC,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;gBACjE,OAAO,CAAC,GAAG,cAAc,EAAE,KAAK,CAAC,CAAC;aACnC;SACF;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,IAAI,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;SACxD;KACF;SAAM;QACL,OAAO,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;KACzD;IAED,OAAO,cAAc,CAAC;AACxB,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,MAAc,EAAE,QAAgB,EAAQ,EAAE;IACzE,IAAI,CAAC,QAAQ,EAAE,EAAE;QACf,OAAO,IAAI,IAAI,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;KAC7C;IAED,OAAO,CAAC,GAAG,CAAC,4BAA4B,EAAE,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAEnE,2DAA2D;IAC3D,IAAI;QACF,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;QAClD,OAAO,CAAC,GAAG,CAAC,8CAA8C,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACvE,OAAO,IAAI,CAAC;KACb;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,IAAI,CAAC,qEAAqE,CAAC,CAAC;QACpF,MAAM,YAAY,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC;QAC9D,OAAO,CAAC,GAAG,CAAC,0CAA0C,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;QAC3E,OAAO,YAAY,CAAC;KACrB;AACH,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAG,KAAK,EAAE,aAA4B,EAAiB,EAAE;IACpF,IAAI,CAAC,QAAQ,EAAE,EAAE;QACf,OAAO;KACR;IAED,IAAI;QACF,6BAA6B;QAC7B,aAAa,CAAC,WAAW,EAAE,CAAC;QAE5B,8CAA8C;QAC9C,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QAEvD,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAC;KACtD;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,IAAI,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;KAC3D;AACH,CAAC,CAAC","sourcesContent":["/**\r\n * Safari-specific helper functions to handle MediaRecorder limitations\r\n */\r\n\r\nexport const isSafari = (): boolean => {\r\n    return true;\r\n//   return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\r\n};\r\n\r\nexport const isSafariVersion = (version: number): boolean => {\r\n  const userAgent = navigator.userAgent;\r\n  const safariMatch = userAgent.match(/Version\\/(\\d+)/);\r\n  if (safariMatch) {\r\n    return parseInt(safariMatch[1]) >= version;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Safari has known issues with MediaRecorder API for longer recordings\r\n * This function provides Safari-specific MediaRecorder options\r\n */\r\nexport const getSafariMediaRecorderOptions = () => {\r\n  if (!isSafari()) {\r\n    return {};\r\n  }\r\n\r\n  return {\r\n    // Safari-specific options\r\n    mimeType: 'audio/webm;codecs=opus', // Better Safari support\r\n    audioBitsPerSecond: 128000, // Lower bitrate for better Safari compatibility\r\n  };\r\n};\r\n\r\n/**\r\n * Safari-specific chunk handling to prevent data loss\r\n */\r\nexport const handleSafariChunk = (chunk: Blob, existingChunks: Blob[]): Blob[] => {\r\n  if (!isSafari()) {\r\n    return [...existingChunks, chunk];\r\n  }\r\n\r\n  // Safari-specific: Validate chunk before adding\r\n  if (chunk && chunk.size > 0) {\r\n    // Safari sometimes sends empty or corrupted chunks\r\n    try {\r\n      // Additional validation for Safari\r\n      if (chunk.type && chunk.type.startsWith('audio/')) {\r\n        console.log('Safari: Adding valid chunk with size:', chunk.size);\r\n        return [...existingChunks, chunk];\r\n      }\r\n    } catch (error) {\r\n      console.warn('Safari chunk validation failed:', error);\r\n    }\r\n  } else {\r\n    console.warn('Safari: Received empty or invalid chunk');\r\n  }\r\n  \r\n  return existingChunks;\r\n};\r\n\r\n/**\r\n * Safari-specific blob creation with fallback\r\n */\r\nexport const createSafariBlob = (chunks: Blob[], mimeType: string): Blob => {\r\n  if (!isSafari()) {\r\n    return new Blob(chunks, { type: mimeType });\r\n  }\r\n\r\n  console.log('Safari: Creating blob from', chunks.length, 'chunks');\r\n  \r\n  // Safari-specific: Use fallback mime type if primary fails\r\n  try {\r\n    const blob = new Blob(chunks, { type: mimeType });\r\n    console.log('Safari: Blob created successfully with size:', blob.size);\r\n    return blob;\r\n  } catch (error) {\r\n    console.warn('Safari blob creation failed with primary mime type, trying fallback');\r\n    const fallbackBlob = new Blob(chunks, { type: 'audio/webm' });\r\n    console.log('Safari: Fallback blob created with size:', fallbackBlob.size);\r\n    return fallbackBlob;\r\n  }\r\n};\r\n\r\n/**\r\n * Safari-specific function to ensure final chunk is captured\r\n */\r\nexport const ensureFinalChunk = async (mediaRecorder: MediaRecorder): Promise<void> => {\r\n  if (!isSafari()) {\r\n    return;\r\n  }\r\n\r\n  try {\r\n    // Request any remaining data\r\n    mediaRecorder.requestData();\r\n    \r\n    // Give Safari time to process the final chunk\r\n    await new Promise(resolve => setTimeout(resolve, 150));\r\n    \r\n    console.log('Safari: Final chunk request completed');\r\n  } catch (error) {\r\n    console.warn('Safari final chunk request failed:', error);\r\n  }\r\n}; "]}